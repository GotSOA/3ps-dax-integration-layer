<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:context="http://www.springframework.org/schema/context" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="EE-3.4.1" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">

	<http:connector name="httpConnector" doc:name="HTTP\HTTPS">
		 <service-overrides sessionHandler="org.mule.session.NullSessionHandler" dispatcherFactory="org.mule.transport.http.NTLMv2HttpClientMessageDispatcherFactor"/>
	</http:connector>
	<object-to-byte-array-transformer name="objectToByteArrayTransformer" doc:name="Object to Byte Array"/>
	
    <context:property-placeholder location="classpath:3ps-dax-int.properties, file:///${app.properties.override.location}" />
    <apikit:config name="apiConfig" raml="3ps-dax-int.raml" consoleEnabled="true" consolePath="console" doc:name="Router" />
    <apikit:mapping-exception-strategy name="apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" />
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" />
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" />
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" />
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" />
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
    <flow name="main" doc:name="main">
        <http:inbound-endpoint address="http://localhost:${http.port}/api" doc:name="HTTP" />
        <apikit:router config-ref="apiConfig" doc:name="APIkit Router" />
        <exception-strategy ref="apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy" />
    </flow>
    <flow name="post:/3ps-dax-int:apiConfig" doc:name="post:/3ps-dax-int:apiConfig">
        <logger level="INFO" doc:name="TODO Validation"/>
        <set-payload value="{
  &quot;status&quot;: &quot;ACK&quot;
}" doc:name="Send ACK"/>
        <async doc:name="Async">
            <logger level="INFO" doc:name="TODO 3ps-Canonical"/>
            <vm:outbound-endpoint exchange-pattern="one-way" path="Q.continue" doc:name="VM Continue"/>
        </async>

    </flow>
    <flow name="send-data-to-DAX-flow" doc:name="send-data-to-DAX-flow">
        <vm:inbound-endpoint exchange-pattern="one-way" doc:name="VM-continue" path="Q.continue"/>
        <logger level="INFO" doc:name="Log Orchestration startTime"/>
        <tracking:custom-event event-name="bizEvent: OrchestrationStartTime" doc:name="bizEvent: OrchestrationStartTime"/>
        <message-properties-transformer doc:name="set DaxStep=1"/>
        <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-step1" path="Q.step1"/>
    </flow>
    <flow name="DAX-step1-flow" doc:name="DAX-step1-flow">
        <vm:inbound-endpoint exchange-pattern="one-way" doc:name="VM-step1" path="Q.step1"/>
        <logger level="INFO" doc:name="Canon-to-CompanyRequest"/>
        <set-payload value="#[new org.tempuri.CustCompanyCodeServiceCreateRequest()]" doc:name="Set Payload"/>
        <!-- <custom-transformer class="" doc:name="Canon-to-CompanyRequest"/> -->
        <!-- <enricher doc:name="Enricher - Company svc"> -->
            <cxf:jaxws-client doc:name="SOAP" clientClass="org.tempuri.CustCompanyCodeService_Service" operation="create" port="BasicHttpBinding_CustCompanyCodeService"/>
            <expression-component doc:name="Expression">flowVars['username']='rvenu00'; flowVars['password']='Ammu1234'; flowVars['domain']='vsclbomdxp05w.bhnetwork.local'; flowVars['realm']='bhnetwork' ; </expression-component>
        	<http:outbound-endpoint  exchange-pattern="request-response" transformer-refs="objectToByteArrayTransformer" method="POST" doc:name="HTTP" path="MicrosoftDynamicsAXAif50/custcompanycodeservice.svc" host="vsclbomdxp05w.bhnetwork.local" port="80"/>
        <!-- </enricher> -->
        <logger level="INFO" doc:name="Enrich-Canonical-w-DAX-values"/>
        <!-- <custom-transformer class="" doc:name="Enrich-Canonical-w-DAX-values"/> -->
        <logger level="INFO" doc:name="Log CompanyGUID sessionProp"/>
        <!-- <choice doc:name="Choice">
            <when expression="">
                <logger level="INFO" doc:name="step1-error"/>
                <custom-transformer class="" doc:name="Enrich-Canonical-w-Error-specifics"/>
                <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-error" path="Q.error"/>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="step1-success"/>
                <message-properties-transformer doc:name="set DaxStep=2"/>
                <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-step2" path="Q.step2"/>
            </otherwise>
        </choice> -->
    </flow>
    <!-- <flow name="DAX-step2-flow" doc:name="DAX-step2-flow">
        <vm:inbound-endpoint exchange-pattern="one-way" doc:name="VM-step2" path="Q.step2"/>
        <custom-transformer class="" doc:name="Canon-to-DivisionRequest"/>
        <enricher doc:name="Enricher - Division svc">
            <cxf:jaxws-service doc:name="SOAP"/>
            <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" method="POST" doc:name="HTTP"/>
        </enricher>
        <custom-transformer class="" doc:name="Enrich-Canonical-w-DAX-values"/>
        <logger level="INFO" doc:name="Log DivisionGUID sessionProp"/>
        <choice doc:name="Choice">
            <when expression="">
                <logger level="INFO" doc:name="step2-error"/>
                <custom-transformer class="" doc:name="Enrich-Canonical-w-Error-specifics"/>
                <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-error" path="Q.error"/>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="step2-success"/>
                <message-properties-transformer doc:name="set DaxStep=3"/>
                <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-step3" path="Q.step3"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="do-the-same-for-step3-to-step6" doc:name="do-the-same-for-step3-to-step6">
        <logger level="INFO" doc:name="..."/>
    </flow>
    <flow name="DAX-step7-flow" doc:name="DAX-step7-flow">
        <vm:inbound-endpoint exchange-pattern="one-way" doc:name="VM-step8" path="Q.step8"/>
        <custom-transformer class="" doc:name="Canon-to-VendorRequest"/>
        <enricher doc:name="Enricher - Vendor svc">
            <cxf:jaxws-service doc:name="SOAP"/>
            <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" method="POST" doc:name="HTTP"/>
        </enricher>
        <custom-transformer class="" doc:name="Enrich-Canonical-w-DAX-values"/>
        <logger level="INFO" doc:name="Log VendorGUID[] sessionProp"/>
        <choice doc:name="Choice">
            <when expression="">
                <logger level="INFO" doc:name="step7-error"/>
                <custom-transformer class="" doc:name="Enrich-Canonical-w-Error-specifics"/>
                <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-error" path="Q.error"/>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="step7-success"/>
                <message-properties-transformer doc:name="set DaxStep=8"/>
                <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-step8" path="Q.step8"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="SetupComplete" doc:name="SetupComplete">
        <vm:inbound-endpoint exchange-pattern="one-way" doc:name="VM-step8" path="Q.step8"/>
        <enricher doc:name="Enricher - Setup Complete svc">
            <cxf:jaxws-service doc:name="SOAP"/>
            <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" method="POST" doc:name="HTTP"/>
        </enricher>
        <choice doc:name="Choice">
            <when expression="">
                <logger level="INFO" doc:name="Log SetupComplete Failure"/>
                <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-error" path="Q.error"/>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="Log SetupComplete Success"/>
                <expression-transformer doc:name="set DaxStep=Complete"/>
                <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-callback-3PS" path="Q.callback"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="DAX-error-flow" doc:name="DAX-error-flow">
        <vm:inbound-endpoint exchange-pattern="one-way" doc:name="VM-error" path="Q.error"/>
        <flow-ref name="" doc:name="Notify Ops"/>
        <logger level="INFO" doc:name="Log Error, failing step &amp; 3PS entityID"/>
        <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-DAX-cleanup" path="Q.cleanup"/>
    </flow>
    <flow name="DAX-retry-flow" doc:name="DAX-retry-flow">
        <vm:inbound-endpoint exchange-pattern="one-way"  doc:name="VM-retry"/>
        <logger level="INFO" doc:name="TO BE IMPLEMENTED..."/>
        <logger level="INFO" doc:name="determine what step is to be retried"/>
        <choice doc:name="Choice">    
            <when expression="">
                <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM-retry-step1"/>
            </when>            
            <when expression="">
                <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM-retry-step2"/>
            </when>
            <when expression="">
                <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM-retry-step3"/>
            </when>
            <when expression="">
                <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM-retry-step4"/>
            </when>
            <when expression="">
                <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM-retry-step5"/>
            </when>
            <when expression="">
                <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM-retry-step6"/>
            </when>
            <when expression="">
                <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM-retry-step7"/>
            </when>
            <when expression="">
                <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM-retry-setupComplete"/>
            </when>
            <otherwise>
                <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM-retry-cleanup"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="DAX-DLQ-flow" doc:name="DAX-DLQ-flow">
        <vm:inbound-endpoint exchange-pattern="one-way" doc:name="VM-DLQ" path="Q.dlq"/>
        <flow-ref name="" doc:name="Notify Ops"/>
        <logger level="INFO" doc:name="ABORT log: avoiding circular references when/if cleanup fails"/>
        <tracking:custom-event event-name="" doc:name="bizEvent: ABORT (unable to cleanup)"/>
    </flow>    
    <flow name="DAX-cleanup-flow" doc:name="DAX-cleanup-flow">
        <vm:inbound-endpoint exchange-pattern="one-way" doc:name="VM-DAX-cleanup" path="Q.cleanup"/>
        <custom-transformer class="" doc:name="Canon-to-CleanupRequest"/>
        <enricher doc:name="Enricher - DAX CleanUp svc">
            <cxf:jaxws-service doc:name="SOAP"/>
            <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" method="POST" doc:name="HTTP"/>
        </enricher>
        <choice doc:name="Choice">
            <when expression="">
                <logger level="INFO" doc:name="CleanUp-failed"/>
                <logger level="INFO" doc:name="Config based (Retry-or-CleanUp?)"/>
                <tracking:custom-event event-name="" doc:name="Set Alert FAILED DAX CLEAN UP"/>
                <choice doc:name="Choice">
                    <when expression="">
                        <message-properties-transformer doc:name="set DaxStep=ABORT"/>
                        <flow-ref name="" doc:name="Notify Ops - ABORT"/>
                        <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-report-error-to-3PS" path="Q.errorReportTo3PS"/>
                    </when>
                    <otherwise>
                        <message-properties-transformer doc:name="set DaxStep=RETRY"/>
                        <flow-ref name="" doc:name="Notify Ops - RETRY"/>
                        <expression-component doc:name="manage - Retry Count"/>
                        <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-DAX-cleanup (recurse)" path="Q.cleanup"/>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="CleanUp-success"/>
                <logger level="INFO" doc:name="report error to 3PS"/>
                <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-reportError-to-3PS" path="Q.errorReportTo3PS"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="3PS-Callback" doc:name="3PS-Callback">
        <composite-source doc:name="Composite Source">
            <vm:inbound-endpoint exchange-pattern="one-way" doc:name="VM-callback-3PS" path="Q.callback"/>
            <vm:inbound-endpoint exchange-pattern="one-way" doc:name="VM-reportError-to-3PS" path="Q.errorReportTo3PS"/>
        </composite-source>
        <enricher doc:name="Enricher - GET-3PS-JSON">
            <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" method="POST" doc:name="HTTP-GET"/>
        </enricher>
        <logger level="INFO" doc:name="3PS-json-BEFORE"/>
        <custom-transformer class="" doc:name="JSON-transformer-enrich-from-canonical"/>
        <logger level="INFO" doc:name="3PS-json-AFTER"/>
        <enricher doc:name="Enricher - POST-3PS-JSON">
            <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" method="POST" doc:name="HTTP-POST"/>
        </enricher>
        <choice doc:name="Choice">
            <when expression="">
                <logger level="INFO" doc:name="ERROR on 3PS Update"/>
                <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-Error" path="Q.error"/>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="SUCCESS: Log Orchestration endTime"/>
                <tracking:custom-event event-name="" doc:name="bizEvent: OrchestrationEndTime"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="notification-service" doc:name="notification-service">
        <custom-transformer class="" doc:name="Based on Notification Level, selects Email Template and Recipient List"/>
        <all doc:name="All">
            <smtp:outbound-endpoint host="localhost" responseTimeout="10000" doc:name="SMTP"/>
            <twilio:add-incoming-phone-number-by-area-code config-ref="" areaCode="" doc:name="Twilio"/>
        </all>
    </flow>
    <flow name="get-data-from-3PS-flow" doc:name="get-data-from-3PS-flow">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" doc:name="HTTP"/>
        <jersey:resources doc:name="REST"/>
        <mulexml:schema-validation-filter schemaLocations="" returnResult="true" doc:name="3PS Schema Validation"/>
        <choice doc:name="Choice">
            <when expression="">
                <message-properties-transformer doc:name="Set 'ACK-INVALID-Schema"/>
            </when>
            <otherwise>
                <message-properties-transformer doc:name="Set 'ACK-GOOD'"/>
            </otherwise>
        </choice>
        <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-transforms" path="Q.transform"/>
        <exception-strategy ref="" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="data-transformation-flow" doc:name="data-transformation-flow">
        <vm:inbound-endpoint exchange-pattern="one-way" doc:name="VM-transforms" path="Q.transform"/>
        <json:json-to-object-transformer doc:name="JSON to Object (canon)"/>
        <flow-ref name="" doc:name="Idempotent Service"/>
        <choice doc:name="Choice">
            <when expression="">
                <logger level="INFO" doc:name="Log 'Already in DAX'"/>
                <message-properties-transformer doc:name="Set Error=DUPLICATE"/>
                <message-properties-transformer doc:name="Set DaxStep=ABORT"/>
                <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-error" path="Q.error"/>
            </when>
            <otherwise>
                <vm:outbound-endpoint exchange-pattern="one-way" doc:name="VM-continue" path="Q.continue"/>
            </otherwise>
        </choice>
        <exception-strategy ref="" doc:name="Reference Exception Strategy"/>
    </flow> -->
</mule>
